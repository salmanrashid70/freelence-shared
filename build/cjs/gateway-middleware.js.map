{"version":3,"file":"gateway-middleware.js","names":["_jsonwebtoken","_interopRequireDefault","require","_errorHandler","e","__esModule","default","allowedTokens","gatewayMiddleware","req","res","next","_req$headers","token","headers","gatewaytoken","NotAuthorizedError","secret","process","env","GATEWAY_SECRET","InternalServerError","payload","JWT","verify","includes","id","error"],"sources":["../../src/gateway-middleware.ts"],"sourcesContent":["import JWT from 'jsonwebtoken';\r\nimport { Request, Response, NextFunction } from 'express';\r\nimport { InternalServerError, NotAuthorizedError } from './error-handler';\r\n\r\n// This middleware checks for a valid gateway token in the request headers.\r\n// It verifies the token against a secret and ensures the token's identifier is allowed.\r\n// If the token is missing, invalid, or expired, it throws an appropriate error.\r\nconst allowedTokens: string[] = [\r\n  'auth',\r\n  'seller',\r\n  'buyer',\r\n  'gig',\r\n  'search',\r\n  'order',\r\n  'review',\r\n  'message',\r\n];\r\n\r\nexport function gatewayMiddleware(\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void {\r\n  const token = req.headers?.gatewaytoken as string;\r\n\r\n  if (!token) {\r\n    throw new NotAuthorizedError(\r\n      'Missing or invalid \"gatewayToken\" in request headers.',\r\n      'Gateway Middleware'\r\n    );\r\n  }\r\n\r\n  try {\r\n    const secret = process.env.GATEWAY_SECRET || '';\r\n\r\n    if (!secret) {\r\n      throw new InternalServerError(\r\n        'Gateway secret is not configured in environment.',\r\n        'Gateway Middleware'\r\n      );\r\n    }\r\n\r\n    const payload = JWT.verify(token, secret) as { id: string; iad: number };\r\n\r\n    if (!allowedTokens.includes(payload.id)) {\r\n      throw new NotAuthorizedError(\r\n        'Invalid service identifier in gateway token.',\r\n        'Gateway Middleware'\r\n      );\r\n    }\r\n\r\n    next();\r\n  } catch (error) {\r\n    return next(\r\n      new NotAuthorizedError(\r\n        'Invalid or expired gateway token.',\r\n        'Gateway Middleware'\r\n      )\r\n    );\r\n  }\r\n}\r\n"],"mappings":";;;;AAAA,IAAAA,aAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,aAAA,GAAAD,OAAA;AAA0E,SAAAD,uBAAAG,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAE1E;AACA;AACA;AACA,MAAMG,aAAuB,GAAG,CAC9B,MAAM,EACN,QAAQ,EACR,OAAO,EACP,KAAK,EACL,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,SAAS,CACV;AAEM,SAASC,iBAAiBA,CAC/BC,GAAY,EACZC,GAAa,EACbC,IAAkB,EACZ;EAAA,IAAAC,YAAA;EACN,MAAMC,KAAK,IAAAD,YAAA,GAAGH,GAAG,CAACK,OAAO,qBAAXF,YAAA,CAAaG,YAAsB;EAEjD,IAAI,CAACF,KAAK,EAAE;IACV,MAAM,IAAIG,gCAAkB,CAC1B,uDAAuD,EACvD,oBACF,CAAC;EACH;EAEA,IAAI;IACF,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,cAAc,IAAI,EAAE;IAE/C,IAAI,CAACH,MAAM,EAAE;MACX,MAAM,IAAII,iCAAmB,CAC3B,kDAAkD,EAClD,oBACF,CAAC;IACH;IAEA,MAAMC,OAAO,GAAGC,qBAAG,CAACC,MAAM,CAACX,KAAK,EAAEI,MAAM,CAAgC;IAExE,IAAI,CAACV,aAAa,CAACkB,QAAQ,CAACH,OAAO,CAACI,EAAE,CAAC,EAAE;MACvC,MAAM,IAAIV,gCAAkB,CAC1B,8CAA8C,EAC9C,oBACF,CAAC;IACH;IAEAL,IAAI,CAAC,CAAC;EACR,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACd,OAAOhB,IAAI,CACT,IAAIK,gCAAkB,CACpB,mCAAmC,EACnC,oBACF,CACF,CAAC;EACH;AACF","ignoreList":[]}